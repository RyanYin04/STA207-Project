# 19.18
library(xls)
library(MASS)
library(ggplot2)
# 19.18
data1 = read.csv('Data19.18.csv')
data1
typeof(data1$Weight.Gain)
class(data1$Weight.Gain)
data1$c('Duration','Weight.Gain') = fatcor(data1$c('Duration','Weight.Gain'))
data1$c('Duration','Weight.Gain') = as.fatcor(data1$c('Duration','Weight.Gain'))
data1$c('Duration','Weight.Gain') = factor(data1$c('Duration','Weight.Gain'))
data1$Duration) = factor(data1$Duration)
data1$Duration = factor(data1$Duration)
data1$Weight.Gain = factor(data1$Weight.Gain)
View(data1)
data1$Y = data1$ï..Y
data1$ï..Y = []
data1 = data1[,2:5]
data1$logy = log10(data1$Y)
data1$logy = log10(data1$Y+1)
aov(logy~Duration+Weight.Gain,data = data1)
fit1 = aov(logy~Duration+Weight.Gain,data = data1)
summary(fit1)
fit1$fitted.values
fit_val = fit1$fitted.values
res = fit1$residuals
res
my_qnorm = function(x){
temp = c()
for (i in 1:length(x)){
temp[i] = pnorm(x[i], mean = 0, sd=1)
}
return(temp)
}
res_ordered=sort(res/sd(res))
res_ordered
expect = my_qnorm(res_ordered)
expect
plot(res_ordered,expect )
cor(expect, res_ordered)
?pnorm()
expect
expect_value = qnorm(expect,mean = 0, sd = 1)
expect_value
res_ordered
cor(expect_value, res_ordered)
len(res_ordered)
length(res_ordered)
seq(60)
actual = (seq(60)-1)/60
actual
expect_value = qnorm(actual,mean = 0, sd = 1)
expect_value
actual = (seq(60))/60
actual = (seq(60)-0.1)/60
actual
expect_value = qnorm(actual,mean = 0, sd = 1)
expect_value
cor(expect_value, res_ordered)
summary(fit1)
fit1
# 19.19
summary(fit1)
fit_inter = aov(logy~Duration*Weight.Gain,data = data1)
fit_inter
summary(fit_inter)
#====================
# 21.7
data2 = read.csv('Data21,7.csv')
data2
data2$Lipid = as.factor(data2$Lipid)
data2$Fat = as.factor(data2$Fat)
data2$Block = as.factor(data2$Block)
data2
#====================
# 21.7
data2 = read.csv('Data21,7.csv')
data2$Fat = as.factor(data2$Fat)
data2$Block = as.factor(data2$Block)
data2
fit2 = aov(Lipid~Block+Fat,data = data2)
fit2
View(data2)
fit2$residuals
plot(fit2$fitted.values,fit2$residuals)
plot(fit2,which = 2)
library(MASS)
library(ggplot2)
data2$fit = fit2$fitted.values
ggplot(data = data2)+ geom_line(aes(x = Fat, y = fit, group = Block))
ggplot(data = data2)+ geom_line(aes(x = Fat, y = fit, group = Block))+ geom_label(show.legend = T)
ggplot(data = data2,aes(x = Fat, y = fit, group = Block))+ geom_line()+ geom_label(show.legend = T)
ggplot(data = data2)+ geom_line(aes(x = Fat, y = fit, group = Block))
confint(fit2, level = 0.95, adjust.method='bonferroni')
# Tukey test:
mu = mean(data2$Lipid)
mu
alpha = tapply(data2$Lipid, data2$Block,mean)-mu
alpha
beta = tapply(data2$Lipid, data2$Fat,mean)-mu
beta
summary(fit2)
fit2$effects
fit2$contrasts
fit2$assign
summary(fit2)
ssto = 1.4190+1.3203+0.0192
ssa = 1.4190
ssb = 1.3203
?merge
data2$alpha = 0
for i = 1:5:
data2$alpha[which(data2$Block = i)] = alpha[i]
for i = 1:5:
data2$alpha[which(data2$Block == i)] = alpha[i]
end
for i in 1:5:
data2$alpha[which(data2$Block == i)] = alpha[i]
data2$alpha[which(data2$Block == i)] = alpha[i]
for i in 1:5{
data2$alpha[which(data2$Block == i)] = alpha[i]
}
for (i in 1:5){
data2$alpha[which(data2$Block == i)] = alpha[i]
}
data2$alpha[which(data2$Fat == i)] = beta[i]
for (i in 1:3){
data2$alpha[which(data2$Fat == i)] = beta[i]
}
data2$alpha[which(data2$Block == i)] = alpha[i]
for (i in 1:5){
data2$alpha[which(data2$Block == i)] = alpha[i]
}
for (i in 1:3){
data2$beta[which(data2$Fat == i)] = beta[i]
}
data2$beta = 0
for (i in 1:3){
data2$beta[which(data2$Fat == i)] = beta[i]
}
data2$ab = data2$Lipid*data2$alpha*data2$beta
D = sum(data2$ab)/sum(alpha^2)*sum(beta^2)
D
ssab = D^2*sum(alpha^2)*sum(beta^2)
ssab
ssr = ssto-ssa-ssb-ssab
f = ssab/(ssr/15-3-5)
f
?pnorm
?fnorm
?pf
pf(f,df1 = 1,df2 = 7)
D
ssab
ssr
f
#============================
#21.8
summary(fit2)
mes= 0.0024
d1 = beta[1]-beta[2]
d2 = beta[1] - beta[3]
de = beta[3] - beta[2]
de = beta[2] - beta[3]
d3 = beta[2] - beta[3]
rm(de)
library(onewaytests)
onewaytests::bf.test(fit2)
onewaytests::bf.test(Lipid~Fat)
onewaytests::bf.test(Lipid~Fat, data =data2)
mse= 0.0024
s = sqrt((2/3)*mse)
s
pairwise.t.test(data2$Lipid,data2$Fat,p.adjust.method = 'bonferroni')
?qt
summary(fit2)
?qtukey
qtukey(1-0.05,df = 3:8)
qtukey(1-0.05,nmeans = 2,df = 3:8)
qtukey(1-0.05,nmeans = 15,df = 3)
qtukey(1-0.05,nmeans = 3,df = 8)
source('~/R/Project/STA 207/ass2/ass2.R')
#============================
#21.8
summary(fit2)
fit2 = aov(Lipid~Fat+Block,data = data2)
#============================
#21.8
summary(fit2)
